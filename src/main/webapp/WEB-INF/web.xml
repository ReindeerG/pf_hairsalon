<?xml version="1.0" encoding="UTF-8"?>
<web-app version="4.0" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee                       http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd">

	<!--
		Spring에서 제공하는 인코딩 필터(UTF-8)
	-->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<!-- 인코딩 옵션 지정 -->
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<!-- 강제 실행 및 우선 적용 -->
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>loginFilter</filter-name>
		<filter-class>
			org.springframework.web.filter.DelegatingFilterProxy
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>loginFilter</filter-name>
		<url-pattern>/pc/schedule</url-pattern>
		<url-pattern>/pc/myinfo</url-pattern>
		<url-pattern>/pc/changepw</url-pattern>
		<url-pattern>/pc/imout</url-pattern>
		<url-pattern>/pc/myreservations</url-pattern>
		<url-pattern>/pc/qna</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>adminFilter</filter-name>
		<filter-class>
			org.springframework.web.filter.DelegatingFilterProxy
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>adminFilter</filter-name>
		<url-pattern>/admin/*</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>notLoginFilter</filter-name>
		<filter-class>
			org.springframework.web.filter.DelegatingFilterProxy
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>notLoginFilter</filter-name>
		<url-pattern>/pc/login</url-pattern>
		<url-pattern>/pc/findid</url-pattern>
		<url-pattern>/pc/temppw</url-pattern>
		<url-pattern>/pc/signin</url-pattern>
		<url-pattern>/pc/signinok</url-pattern>
		<url-pattern>/pc/confirm</url-pattern>
		<url-pattern>/pc/notmailconfirmed</url-pattern>
		<url-pattern>/pc/expr_customer</url-pattern>
		<url-pattern>/pc/expr_admin</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>notAdminFilter</filter-name>
		<filter-class>
			org.springframework.web.filter.DelegatingFilterProxy
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>notAdminFilter</filter-name>
		<url-pattern>/pc/hairart/*</url-pattern>
	</filter-mapping>

	<error-page>
		<location>/error</location>
	</error-page>
   <!--
		- Location of the XML file that defines the root application context.
		- Applied by ContextLoaderListener.
		
		전역 설정 파일
		- DispatcherServlet보다 상위 개념의 설정 파일.
		- DispatcherServlet이 여러 개일 수도 있다고 생각하면, 공용 자원들을 관리할 필요성이 생김.
		- DB 관련(Dao 등), view와 관계 없는 내용들.
	-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring/application-config.xml</param-value>
    </context-param>

	<!--
		설정 파일간의 연결을 수행하는 클래스
	-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
    
    <!--
		- Servlet that dispatches request to registered handlers (Controller implementations).
		
		Spring 핵심 제어 장치인 DispatcherServlet을 등록하는 코드
	-->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/mvc-config.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

</web-app>
